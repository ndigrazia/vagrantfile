# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-18.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  #config.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "127.0.0.1"
  #config.vm.network "forwarded_port", guest: 5005, host: 5005, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 443, host: 443, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8081, host: 8081, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8443, host: 8443, host_ip: "127.0.0.1"	
  #config.vm.network "forwarded_port", guest: 3306, host: 3306, host_ip: "127.0.0.1"	
  
  #ELASTIC
  config.vm.network "forwarded_port", guest: 9200, host: 9200, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 9300, host: 9300, host_ip: "127.0.0.1"	
  
  config.vm.network "forwarded_port", guest: 11222, host: 11222, host_ip: "127.0.0.1"	
  
  #MONGO
  config.vm.network "forwarded_port", guest: 27017, host: 27017, host_ip: "127.0.0.1"	
  
  config.vm.network "forwarded_port", guest: 7687, host: 7687, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 7474, host: 7474, host_ip: "127.0.0.1"	
  
  #ZOOKEEPER
  config.vm.network "forwarded_port", guest: 2181, host: 2181, host_ip: "127.0.0.1"	
  
  #KAFKA
  config.vm.network "forwarded_port", guest: 9092, host: 9092, host_ip: "127.0.0.1"	
  
  config.vm.network "forwarded_port", guest: 8161, host: 8161, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 61616, host: 61616, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 5672, host: 5672, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 8180, host: 8180, host_ip: "127.0.0.1"	
  
  #POSTGRES
  config.vm.network "forwarded_port", guest: 5432, host: 5432, host_ip: "127.0.0.1"	
  
  #JAGER
  config.vm.network "forwarded_port", guest: 14268, host: 14268, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 16686, host: 16686, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 5775, host: 5775, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 5778, host: 5778, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 6831, host: 6831, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 6832, host: 6832, host_ip: "127.0.0.1"	
  
  #graylog
  config.vm.network "forwarded_port", guest: 12201, host: 12201, host_ip: "127.0.0.1", protocol: "udp"
  config.vm.network "forwarded_port", guest: 5000, host: 5000, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 9600, host: 9600, host_ip: "127.0.0.1"	
  config.vm.network "forwarded_port", guest: 1514, host: 1514, host_ip: "127.0.0.1"	
  
  #kibana
  config.vm.network "forwarded_port", guest: 5601, host: 5601, host_ip: "127.0.0.1"	
  
  #Registry
  config.vm.network "forwarded_port", guest: 5000, host: 5000, host_ip: "127.0.0.1"	
    
	
  #DynamoDB
  config.vm.network "forwarded_port", guest: 8000, host: 8000, host_ip: "127.0.0.1"	
  
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  #config.vm.synced_folder "shared_files", "/shared_files"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "3072"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
	sudo apt update
	sudo apt install -y unzip wget
	sudo apt install -y default-jdk
	wget https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.zip
	unzip apache-maven-3.8.3-bin.zip
	sudo cp -R apache-maven-3.8.3/* /usr/local
	sudo rm -R apache-maven-3.8.3*

	sudo apt-get -y install apt-transport-https ca-certificates curl gnupg lsb-release
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
	echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
	sudo apt-get update
	sudo apt-get install -y docker-ce docker-ce-cli containerd.io
  SHELL
end